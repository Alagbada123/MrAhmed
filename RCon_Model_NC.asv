%% RCon_Model_RCA.m
% This code is for modelling the homogenized stiffness and strength
% prediction of concrete with the composition of brick aggregates

clearvars; close all; clc;
addpath('functions');         % Folder containing homogenization functions
addpath('preCAL');         % Folder containing precalculated Bulk cement paste and ITZ parameters
addpath('experimental_data');

%% 1). LOAD INPUT

% precision
steps_angleHYD=11;
steps_angleCON=31;
steps_rHZ=11;
choose_Eonly=1; % 1...only elasticity prediction, 0... also strength

% initialization of output

Estruc=struct('E',NaN,'nu',NaN);
scaleEstruct=struct('bcp',Estruc,'Icp1',Estruc,'Icp2',Estruc,'Icp3',Estruc,'conc',Estruc);

critstruct=struct('SIult',NaN,'I',NaN,'zeniHYD',NaN,'aziCON',NaN,'zeni_con',NaN,'r',NaN);
RCsol=struct('failure',critstruct,'siDP',NaN,'crit',NaN,'vol',NaN,'elasticity',scaleEstruct,'Rlist',NaN,'discrete',NaN); %structure with all solutions for one composition


critstruct=struct('maxSI',NaN,'zeniHYD',NaN,'aziCON',NaN,'zeniCON',NaN,'r',NaN);
RCsol.crit=repmat({critstruct}, 1,6);

siDPstruct=zeros(steps_angleHYD,steps_angleCON);
siDPstruct2=zeros(steps_angleHYD,steps_angleCON,steps_angleCON,steps_rHZ);
siDP_cell=repmat({siDPstruct}, 1,5);
siDP_cell{2}=siDPstruct2;siDP_cell{3}=siDPstruct2;siDP_cell{4}=siDPstruct2;siDP_cell{5}=siDPstruct2;
RCsol.siDP=siDP_cell;

RCsol.discrete=struct('angleHYD',NaN,'angleCON',NaN,'r',NaN);


% required parameters to extract needed cement paste and ITZ properties

req_wc = 0.55;
req_xi = 0.05:0.05:1;
req_Fpor = [1.0, 1.1, 1.1, 1.1];
fileoutput='sensFpor';
RC_sens=cell(length(req_wc),length(req_xi),length(req_Fpor));
strength_values = NaN(1, length(req_xi)); % Initialize array for strength results
compressive_strength = NaN(length(req_xi), 5);   % ← NEW: per‐phase strength (sand, ITZ1–3, matrix)

% load precalculated cement paste properties
load('precalc_cpwcallOD.mat');
[length_wc,length_xi]=size(output_cell);
xi_calclist=zeros(1,length_xi);wc_calclist=zeros(1,length_wc);
for xiit=1:length_xi
    xi_calclist(xiit)=output_cell{1,xiit}.xi; % get list of calculated xi
end
for wcit=1:length_wc
    wc_calclist(wcit)=output_cell{wcit,1}.wc; % get list of calculated wc
end

% load precalculated ITZ-related cement paste properties
load('precalc_cpITZOD_updated.mat')
[length_wcITZ,length_xiITZ,length_Fpor]=size(outputITZ_cell);
xi_ITZ_calclist=zeros(1,length_xiITZ);wc_ITZ_calclist=zeros(1,length_wcITZ);Fpor_ITZ_calclist=zeros(1,length_Fpor);
for xiit=1:length_xiITZ
    xi_ITZ_calclist(xiit)=outputITZ_cell{1,xiit,1}.xi; % get list of calculated xi
end
for wcit=1:length_wcITZ
    wc_ITZ_calclist(wcit)=outputITZ_cell{wcit,1,1}.wc; % get list of calculated wc
end
for Fit=1:length_Fpor
    Fpor_ITZ_calclist(Fit)=outputITZ_cell{1,1,Fit}.Fpor; % get list of calculated Fpor
end



for wcit=1:length(req_wc)
    wc_ncp=req_wc(wcit);
    for xiit=1:length(req_xi)
        xi_ncp_max=min(1,wc_ncp/0.42);
        xi_ncp=min(req_xi(xiit),xi_ncp_max);
        
        disp(['STARTING WITH TEST wc=',num2str(wc_ncp),'  xi=',num2str(xi_ncp)])
        
        %% 2) HOMOGENIZATION OF CEMENT PASTE FROM PRECALCULATION
        
        % 2a) BULK CEMENT PASTE
        % check indices
        indwc=find(abs(wc_calclist-wc_ncp)<1e-10,1);
        indxi=find(abs(xi_calclist-xi_ncp)<1e-10,1);
        % --- Insert this before line 88 ---
        find_tolerance = 1e-8; % Adjust if needed
        
        % --- Modify line 88 ---
        indwc=find(abs(wc_calclist-wc_ncp) < find_tolerance, 1);
        
        % --- Modify line 89 ---
        indxi=find(abs(xi_calclist-xi_ncp) < find_tolerance, 1);
        
        % --- Add checks after find (Recommended) ---
        if isempty(indwc)
            error('Could not find wc_ncp = %.2f in wc_calclist. Check precalc_cpwcall.mat', wc_ncp);
        end
        if isempty(indxi)
            error('Could not find xi_ncp = %.2f in xi_calclist. Check precalc_cpwcall.mat', xi_ncp);
        end
        % --- Line 90 remains the same ---

        % export from precalculated file
        Ebcp=output_cell{indwc,indxi}.calc_cp.E;           % Access E from calc_cp
        nubcp=output_cell{indwc,indxi}.calc_cp.nu;           % Access nu from calc_cp
        diffQ_vol_bcp=output_cell{indwc,indxi}.calc_cp.diffQvol; % Access diffQvol from calc_cp
        diffQ_dev_bcp=output_cell{indwc,indxi}.calc_cp.diffQdev; % Access diffQdev from calc_cp
        fhf_bcp=output_cell{indwc,indxi}.vol_cp.hf;            % Access hf frac from vol_cp
        fhyddiff_bcp=output_cell{indwc,indxi}.numerics(2);     % Access fhyddiff from numerics
        
        % stiffness
        [kbcp,mubcp]=fun_kmu_from_Enu(Ebcp,nubcp);
        Cbcp=fun_CfromEnu(Ebcp,nubcp);
        
        % store
        RCsol.elasticity.bcp.E=Ebcp;
        RCsol.elasticity.bcp.nu=nubcp;

        % 2b) ITZ at 10µm
        % check indices
        indwc=find(abs(wc_ITZ_calclist-wc_ncp)<1e-10,1);
        indxi=find(abs(xi_ITZ_calclist-xi_ncp)<1e-10,1);
        indFpor=find(abs(Fpor_ITZ_calclist-req_Fpor(2))<1e-10,1);
        
        % export from precalculated file
        EIcp1=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.E;     % Access E from calc_cp
        nuIcp1=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.nu;     % Access nu from calc_cp
        diffQ_vol_Icp1=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQvol; % Access diffQvol from calc_cp
        diffQ_dev_Icp1=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQdev; % Access diffQdev from calc_cp
        fhf_Icp1=outputITZ_cell{indwc,indxi,indFpor}.vol_cp.hf;      % Access hf frac from vol_cp
        fhyddiff_Icp1=outputITZ_cell{indwc,indxi,indFpor}.numerics(2); % Access fhyddiff from numerics
        
        % stiffness
        [kIcp1,muIcp1]=fun_kmu_from_Enu(EIcp1,nuIcp1);
        CIcp1=fun_CfromEnu(EIcp1,nuIcp1);

        % store
        RCsol.elasticity.Icp1.E=EIcp1;
        RCsol.elasticity.Icp1.nu=nuIcp1;

        % 2c) ITZ at 20µm
        % check indices
        indwc=find(abs(wc_ITZ_calclist-wc_ncp)<1e-10,1);
        indxi=find(abs(xi_ITZ_calclist-xi_ncp)<1e-10,1);
        indFpor=find(abs(Fpor_ITZ_calclist-req_Fpor(3))<1e-10,1);
        
        % export from precalculated file
        EIcp2=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.E;
        nuIcp2=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.nu;
        diffQ_vol_Icp2=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQvol;
        diffQ_dev_Icp2=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQdev;
        fhf_Icp2=outputITZ_cell{indwc,indxi,indFpor}.vol_cp.hf; % Corrected access
        fhyddiff_Icp2=outputITZ_cell{indwc,indxi,indFpor}.numerics(2);
        
        % stiffness
        [kIcp2,muIcp2]=fun_kmu_from_Enu(EIcp2,nuIcp2);
        CIcp2=fun_CfromEnu(EIcp2,nuIcp2);

        % store
        RCsol.elasticity.Icp2.E=EIcp2;
        RCsol.elasticity.Icp2.nu=nuIcp2;
 
        % 2d) ITZ at 30µm
        % check indices
        indwc=find(abs(wc_ITZ_calclist-wc_ncp)<1e-10,1);
        indxi=find(abs(xi_ITZ_calclist-xi_ncp)<1e-10,1);
        indFpor=find(abs(Fpor_ITZ_calclist-req_Fpor(4))<1e-10,1);
        
        % export from precalculated file
        EIcp3=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.E;
        nuIcp3=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.nu;
        diffQ_vol_Icp3=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQvol;
        diffQ_dev_Icp3=outputITZ_cell{indwc,indxi,indFpor}.calc_cp.diffQdev;
        fhf_Icp3=outputITZ_cell{indwc,indxi,indFpor}.vol_cp.hf; % Corrected access
        fhyddiff_Icp3=outputITZ_cell{indwc,indxi,indFpor}.numerics(2);
        
        % stiffness
        [kIcp3,muIcp3]=fun_kmu_from_Enu(EIcp3,nuIcp3);
        CIcp3=fun_CfromEnu(EIcp3,nuIcp3);

        % store
        RCsol.elasticity.Icp3.E=EIcp3;
        RCsol.elasticity.Icp3.nu=nuIcp3;


        %% 3) VOLUME FRACTION FOR CONCRETE AND ITZ
        % DENSITIES
        rhoH2O=1000; rhohyd=2073; rhocem=3150; rho_sand=2240; rho_ragg=2640;
        sc=3.522; raggc=1.512; 

        % 3a) CONCRETE-RELATED
        fsand_conc = (sc/rho_sand)/(1/rhocem+wc_ncp/rhoH2O+sc/rho_sand+raggc/rho_ragg);
        fragg_conc = (raggc/rho_ragg)/(1/rhocem+wc_ncp/rhoH2O+sc/rho_sand+raggc/rho_ragg);
        fcp_conc = 1-fsand_conc-fragg_conc;
        % fsand_ITZ = calculate_ITZ_volume_fraction(fsand_conc, 0.6, 4, 0.03, 0);
        fragg_ITZ = calculate_ITZ_volume_fraction(fragg_conc, 4, 16, 0.03, 0);
        fITZ_layer = fragg_ITZ/3;
        fbcp_conc = fcp_conc - fragg_ITZ;


        %% 4) HOMOGENIZATION OF RECYCLED CONCRETE
        % PHASE STIFFNESS
        Eclin=139.9; nuclin=0.3;
        [kclin,muclin]=fun_kmu_from_Enu(Eclin,nuclin);
        Cclin=fun_CfromEnu(Eclin,nuclin); %cement clinker
        
        Ehyd=29.15786664; nuhyd=0.24; 
        [khyd,muhyd]=fun_kmu_from_Enu(Ehyd,nuhyd);
        Chyd=fun_CfromEnu(Ehyd,nuhyd); %hydrates

        % ENAC=47.66 ; nuNAC=0.159; 
        kNAC=35.35; muNAC=29.91;
        % [kNAC,muNAC]=fun_kmu_from_Enu(ENAC,nuNAC);
        CNAC=fun_Cfromkmu(kNAC,muNAC); % initially homogenized concrete used now as an  aggregates

        % ERBC=23.0 ; nuRBC=0.17; 
        % [kNAC,muNAC]=fun_kmu_from_Enu(ERBC,nuRBC);
        % CNAC=fun_CfromEnu(ERBC,nuRBC); %hydrates

        kNA=35.35; muNA=29.91;
        CNA = fun_Cfromkmu(kNA,muNA); %natural aggregates (sand)

        % basic tensor
        I = eye(6);
        J = (1/3) * [ones(3,3), zeros(3,3); zeros(3,6)];
        K = I - J;

        % 4a) Getting the strain concentration Tensor for covered aggregates
        % Radius of spheres from volume fractions
        R_ragg = (1/2)*6^(1/3)*fragg_conc^(1/3)/pi^(1/3);
        R_ITZ1 = (1/2)*6^(1/3)*(fragg_conc+fITZ_layer)^(1/3)/pi^(1/3);
        R_ITZ2 = (1/2)*6^(1/3)*(fragg_conc+fITZ_layer*2)^(1/3)/pi^(1/3);
        R_ITZ3 = (1/2)*6^(1/3)*(fragg_conc+fITZ_layer*3)^(1/3)/pi^(1/3);
        R_bcp = (1/2)*6^(1/3)*(fragg_conc+fragg_ITZ+fbcp_conc)^(1/3)/pi^(1/3);
        RCsol.Rlist=[R_ragg,R_ITZ1,R_ITZ2,R_ITZ3,R_bcp];
        
        % Apply Herve-Zaoui solution
        in_m=[kNAC,muNAC,R_ragg;...
            kIcp1,muIcp1,R_ITZ1;...
            kIcp2,muIcp2,R_ITZ2;...
            kIcp3,muIcp3,R_ITZ3;...
            kbcp,mubcp,R_bcp];
        sol_int=fun_HZ_int(in_m);   

        Ainf_ragg=sol_int(1,5)*J+sol_int(1,7)*K;
        Ainf_ITZ1=sol_int(2,5)*J+sol_int(2,7)*K;
        Ainf_ITZ2=sol_int(3,5)*J+sol_int(3,7)*K;
        Ainf_ITZ3=sol_int(4,5)*J+sol_int(4,7)*K;
        Ainf_bcp=I;

        % 4b) Getting the strain concentration Tensor for uncovered aggregates
        P_sph=fun_P_sphere_iso(Cbcp);
        Ainf_NA=inv(I+P_sph*(CNA-Cbcp));
        % Ainf_ragg=inv(I+P_sph*(CNAC-Cbcp));

        % strain concentration tensors
        EEinfty_con=inv(fsand_conc*Ainf_NA + fragg_conc*Ainf_ragg + fITZ_layer*Ainf_ITZ1 + fITZ_layer * Ainf_ITZ2 + fITZ_layer*Ainf_ITZ3 + fbcp_conc*Ainf_bcp);
        % EEinfty_con=inv(fsand_conc*Ainf_NA + fragg_conc*Ainf_ragg + fcp_conc*Ainf_bcp);
        A_NA=Ainf_NA*EEinfty_con;
        A_ragg=Ainf_ragg*EEinfty_con;
        A_ITZ1=Ainf_ITZ1*EEinfty_con;
        A_ITZ2=Ainf_ITZ2*EEinfty_con;
        A_ITZ3=Ainf_ITZ3*EEinfty_con;
        A_bcp=Ainf_bcp*EEinfty_con;


        % Homogenized stiffness (MORI-TANAKA)
        Ccon=fsand_conc*CNA*A_NA + fragg_conc*CNAC*A_ragg + fITZ_layer*CIcp1*A_ITZ1 + fITZ_layer*CIcp2*A_ITZ2 + fITZ_layer*CIcp3*A_ITZ3 + fbcp_conc*Cbcp*A_bcp;
        % Ccon=fsand_conc*CNA*A_NA + fragg_conc*CNAC*A_ragg + fcp_conc*Cbcp*A_bcp;
        
        kcon = Ccon(1,1)-4/3*(Ccon(6,6)/2);
        mucon = (Ccon(6,6)/2);

        [Econ,nucon]=fun_Enu_from_kmu(kcon,mucon);
        
        % store
        [RCsol.elasticity.conc.E,RCsol.elasticity.conc.nu]=fun_Enu_from_kmu(kcon,mucon);

        % Store computed Elastic Modulus into RC_sens for plotting later
        RC_sens{wcit, xiit, 1} = RCsol.elasticity.conc.E;

        %% 5) STRESS CONCENTRATION TO ITZs AND HYDRATES
        % HYDRATE STRENGTH
        % Mohr_Coulomb
        phi_hyd_degree=12; %Degree
        c_hyd=0.050; %GPa
        phi_hyd=phi_hyd_degree*pi/180;
        fc_MC=2*c_hyd*cos(phi_hyd)/(1-sin(phi_hyd));
        
        % Drucker Prager (based on MC parameters)
        alpha_DP=sqrt(3)*fc_MC*tan(phi_hyd)/(3*c_hyd+fc_MC*tan(phi_hyd));
        k_DP=c_hyd*alpha_DP/tan(phi_hyd);
        fc_DP=3*k_DP/(sqrt(3)-alpha_DP);

        if choose_Eonly==0
            % stres concentration tensors for uncovered aggregate
            B_sand=CNA*A_NA*inv(Ccon);
            BITZsand_sph=fun_BITZagg(kNA,kbcp,muNA,mubcp);

            % check all angles
            SI_macro=[0,0,-1,0,0,0]'; %uniaxial compression in e3 direction
            angle_HYD=0:pi/(2*(steps_angleHYD-1)):pi/2;
            angle_CON=0:pi/(2*(steps_angleCON-1)):pi/2;
    
            % store angles in structure
            RCsol.discrete.angleHYD=angle_HYD;
            RCsol.discrete.angleCON=angle_CON;
            
    
            for zeniHYDit=1:steps_angleHYD
                % rotate the macroscopic loading
                zeniL=angle_HYD(zeniHYDit);
                % for aziLit=1:steps_angleHYD... MAYBE!!
                aziL=0;
                Q4=fun_Q4_bp(aziL,zeniL);
                Q4t=transpose(Q4);
                SI_macro_rot=Q4t*SI_macro;
                E_macro_rot=inv(Ccon)*SI_macro_rot;
                
                %% 5a) failure around non-covered aggregates
                for zeniCONit=1:length(angle_CON)
                    % Transformation matrices
                    psiL=angle_CON(zeniCONit);
                    Q4=fun_Q4_bp(0,psiL); Q4t=transpose(Q4); % Transformation to Cartesian base
                    
                    % failure around natural aggregates
                    BITZsand=Q4t*BITZsand_sph*Q4;
                    eps_ITZ=inv(Cbcp)*BITZsand*B_sand*SI_macro_rot;
                    si_hyd_vol2=khyd*sqrt(3/(fhyddiff_bcp*fhf_bcp)*eps_ITZ'*(diffQ_vol_bcp*eps_ITZ));
                    si_hyd_dev2=muhyd*sqrt(2/(fhyddiff_bcp*fhf_bcp)*eps_ITZ'*(diffQ_dev_bcp*eps_ITZ));
                    siDP=si_hyd_dev2/sqrt(2)-alpha_DP*si_hyd_vol2/sqrt(3);
                    RCsol.siDP{1}(zeniHYDit,zeniCONit)=siDP;
                end
        
                %% 5b) failure around covered aggregates
                % macroloading translated to HZ matrix-inclusion
                E_HZ_rot=EEinfty_con*E_macro_rot;
                
                % stress/strain field CONCRETE based on Herve-Zaoui solution
                [eps_cart_cell,~,r_HZ,angle_HZ] = fun_HZ_field(in_m,E_HZ_rot,sol_int,steps_rHZ,steps_angleCON);
                RCsol.discrete.r = [r_HZ(1:steps_rHZ); 
                        r_HZ((steps_rHZ+1):(2*steps_rHZ)); 
                        r_HZ((2*steps_rHZ+1):(3*steps_rHZ)); 
                        r_HZ((3*steps_rHZ+1):(4*steps_rHZ)); 
                        r_HZ((4*steps_rHZ+1):(5*steps_rHZ))];
    
                
                % stress hydrate in/around covered aggregate
                for aziCONit=1:steps_angleCON
                    for zenCONit=1:steps_angleCON
                        for rit_con=1:steps_rHZ
                            % failure in ITZ Layer 1
                            eps_ITZ=eps_cart_cell{aziCONit,zenCONit}(:,steps_rHZ+rit_con);
                            si_hyd_vol2=khyd*sqrt(3/(fhyddiff_Icp1*fhf_Icp1)*eps_ITZ'*(diffQ_vol_Icp1*eps_ITZ));
                            si_hyd_dev2=muhyd*sqrt(2/(fhyddiff_Icp1*fhf_Icp1)*eps_ITZ'*(diffQ_dev_Icp1*eps_ITZ));
                            siDP=si_hyd_dev2/sqrt(2)-alpha_DP*si_hyd_vol2/sqrt(3);
                            RCsol.siDP{2}(zeniHYDit,aziCONit,zenCONit,rit_con)=siDP;
                            
                            % failure in ITZ Layer 2
                            eps_ITZ=eps_cart_cell{aziCONit,zenCONit}(:,2*steps_rHZ+rit_con);
                            si_hyd_vol2=khyd*sqrt(3/(fhyddiff_Icp2*fhf_Icp2)*eps_ITZ'*(diffQ_vol_Icp2*eps_ITZ));
                            si_hyd_dev2=muhyd*sqrt(2/(fhyddiff_Icp2*fhf_Icp2)*eps_ITZ'*(diffQ_dev_Icp2*eps_ITZ));
                            siDP=si_hyd_dev2/sqrt(2)-alpha_DP*si_hyd_vol2/sqrt(3);
                            RCsol.siDP{3}(zeniHYDit,aziCONit,zenCONit,rit_con)=siDP;
        
                            % failure in ITZ Layer 3
                            eps_ITZ=eps_cart_cell{aziCONit,zenCONit}(:,3*steps_rHZ+rit_con);
                            si_hyd_vol2=khyd*sqrt(3/(fhyddiff_Icp3*fhf_Icp3)*eps_ITZ'*(diffQ_vol_Icp3*eps_ITZ));
                            si_hyd_dev2=muhyd*sqrt(2/(fhyddiff_Icp3*fhf_Icp3)*eps_ITZ'*(diffQ_dev_Icp3*eps_ITZ));
                            siDP=si_hyd_dev2/sqrt(2)-alpha_DP*si_hyd_vol2/sqrt(3);
                            RCsol.siDP{4}(zeniHYDit,aziCONit,zenCONit,rit_con)=siDP;
        
                            % failure in new paste matrix
                            eps_ITZ=eps_cart_cell{aziCONit,zenCONit}(:,4*steps_rHZ+rit_con); %in HZ problem
                            si_hyd_vol2=khyd*sqrt(3/(fhyddiff_bcp*fhf_bcp)*eps_ITZ'*(diffQ_vol_bcp*eps_ITZ));
                            si_hyd_dev2=muhyd*sqrt(2/(fhyddiff_bcp*fhf_bcp)*eps_ITZ'*(diffQ_dev_bcp*eps_ITZ));
                            siDP=si_hyd_dev2/sqrt(2)-alpha_DP*si_hyd_vol2/sqrt(3);
                            RCsol.siDP{5}(zeniHYDit,aziCONit,zenCONit,rit_con)=siDP;
        
                        end
                    end
                end
            end
            %% 6) get maxima of stresses, corresponding strength, and critical position/orientation
            for i=1:5
                if i<=1
                    tmp=RCsol.siDP{i}(:,:);
                    [RCsol.crit{i}.maxSI, k] = max(tmp(:));
                    [zeniHYDi, zeniCONi] = ind2sub(size(tmp),k);
                    RCsol.crit{i}.zeniHYD=angle_HYD(zeniHYDi)*180/pi;
                    RCsol.crit{i}.zeniCON=angle_CON(zeniCONi)*180/pi;
                else
                    tmp=RCsol.siDP{i}(:,:,:,:);
                    [RCsol.crit{i}.maxSI, k] = max(tmp(:));
                    [zeniHYDi, aziCONi, zeniCONi, ri] = ind2sub(size(tmp),k);
                    RCsol.crit{i}.zeniHYD=angle_HYD(zeniHYDi)*180/pi;
                    RCsol.crit{i}.aziCON=angle_CON(aziCONi)*180/pi;
                    RCsol.crit{i}.zeniCON=angle_CON(zeniCONi)*180/pi;
                    RCsol.crit{i}.r=r_HZ(ri);
                end
            end
            
            % total maximum stress
            tmp=[RCsol.crit{1}.maxSI,RCsol.crit{2}.maxSI,RCsol.crit{3}.maxSI,RCsol.crit{4}.maxSI,RCsol.crit{5}.maxSI];
            compressive_strength(xiit, :) = (k_DP ./ tmp) * 1000;
            [maxSI,k]=max(tmp);
            RCsol.failure.SIult=k_DP/maxSI*1000;
            % --- Add this line at line 375 ---
            strength_values(xiit) = RCsol.failure.SIult; % Store the calculated strength
            RCsol.failure.I=k;
            RCsol.failure.zeniHYD=RCsol.crit{k}.zeniHYD;
            RCsol.failure.aziCON=RCsol.crit{k}.aziCON;
            RCsol.failure.zeniCON=RCsol.crit{k}.zeniCON;
            RCsol.failure.r=RCsol.crit{k}.r;
        end
        
    end
end


%% 7) OUTPUT
if choose_Eonly==1
    filename = ['RC_final_Eod111111_',fileoutput,'.mat'];
    save(filename,'RC_sens');
else
    filename = ['RC_final_strengthssd141312_',fileoutput,'.mat'];
    save(filename,'strength_values','compressive_strength');
end

disp(['results for all compositions written to ',filename])

%% DISPLAY
RCsol.failure
RCsol.elasticity.conc


%% 8) PLOT SIMULATION VS EXPERIMENTAL DATA

run('create_experimental_data.m'); % Load experimental data

% Extract data
xi_values = req_xi;                        % (simulated) hydration degrees
elastic_modulus_values = zeros(size(xi_values));

for i = 1:length(xi_values)
    if ~isempty(RC_sens{1, i, 1})
        elastic_modulus_values(i) = RC_sens{1, i, 1}; % simulated E
    else
        elastic_modulus_values(i) = NaN;
    end
end

% Insert (0,0) so the plot starts at E=0 for xi=0
xi_plot = [0, xi_values];
E_plot  = [0, elastic_modulus_values];

% Experimental data
exp_xi_vals = experimental_data.xi_marker_vals;
exp_E_vals  = experimental_data.SSD.youngs_modulus(4, :);
exp_std_dev = experimental_data.SSD.youngs_modulus_stddev(4, :);

% Set colors for lines
colors = {'b', 'r', 'g', 'm', 'c'};

f = figure; 
% figure;
hold on;

% 1) Plot Modeled Data, starting at (0,0)
plot(xi_plot, E_plot, '-', 'LineWidth', 2, 'Color', colors{1}, ...
     'DisplayName', 'Modeled Data');

% 2) Plot & connect Experimental Data
errorbar(exp_xi_vals, exp_E_vals, exp_std_dev, 'o', ...
    'Color', colors{2}, 'MarkerFaceColor', colors{2}, 'MarkerSize', 6, ...
    'CapSize', 5, 'DisplayName', 'RCA (Experimental)');

grid on;
box on;
set(gca, 'FontSize', 12, 'LineWidth', 1);

set (0, "defaultaxesfontname", "Times New Roman")
set (0, "defaultaxesfontsize", 12)
set (0, "defaulttextfontname", "Times New Roman")
set (0, "defaulttextfontsize", 12) 
% Get the current axes
ax = gca;

% Enable the minor grid
ax.XMinorGrid = 'on';
ax.YMinorGrid = 'on';

% Set the minor grid spacing
ax.XMinorTick = 'on';
ax.YMinorTick = 'on';

% Adjust the minor tick spacing
ax.XAxis.MinorTickValues = 0.1:0.2:0.9;
ax.YAxis.MinorTickValues = 5:10:45;


% Change the linestyle of the major grid
ax.GridLineStyle = ':'; % Change to dashed lines ('--')
ax.MinorGridLineStyle = ':'; % Change to dashed lines ('--')

% % Customize the appearance (optional)
ax.GridAlpha = 0.4; % Grid line transparency
ax.MinorGridAlpha = 0.4; 


xlabel('Hydration Degree \xi [-]', 'FontSize', 12);
ylabel('E-Modulus {\it E_{conc}} [GPa]', ...
       'FontSize', 12, 'Interpreter', 'tex');

% title('Comparison of Experimental and Modeled Concrete Elasticity', ...
%       'FontSize', 14);

yticks(0:10:50);
xlim([0 1]);
ylim([0 50]);


legend('Location', 'southeast', 'FontSize', 10);
hold off;

% format_fig(13,10)
% print(f,'RCA.emf','-dmeta')

% --- Add this line ---
run('create_experimental_data.m'); % Load experimental data structure
%% 9) PLOT SIMULATION VS EXPERIMENTAL DATA (Compressive Strength)
if choose_Eonly == 0 % Only plot strength if it was calculated
    disp('Plotting Compressive Strength vs. Hydration Degree...');

    % --- Prepare Modeled Data ---
    xi_values = req_xi; % Hydration degrees calculated (starts at 0.05)
    % Always create the initial arrays including the (0,0) point
    xi_plot_cs_full = [0, xi_values]; % Use a temporary full name
    strength_plot_full = [0, strength_values]; % Use a temporary full name

    % --- Check for NaNs and Prepare final plot data ---
    valid_indices_cs = ~isnan(strength_plot_full); % Find non-NaN indices

    if ~any(valid_indices_cs) % Check if there are NO valid indices AT ALL
        warning('No valid strength data calculated to plot.');
        can_plot_modeled_data = false; % Set flag
        xi_plot_cs = []; % Ensure plotting variables are empty if no data
        strength_plot = [];
    else
        can_plot_modeled_data = true; % Set flag
        % Filter data for plotting (this DEFINES the final variables)
        xi_plot_cs    = xi_plot_cs_full(valid_indices_cs);
        strength_plot = strength_plot_full(valid_indices_cs);
    end

    % --- Load Experimental Compressive Strength Data (SSD Example) ---
    % (Keep your existing experimental data loading block here - lines ~554-576)
    % It correctly sets 'exp_strength_available'
    exp_strength_available = false; % Flag
    if exist('experimental_data', 'var') && isfield(experimental_data, 'SSD') && isfield(experimental_data.SSD, 'strength_MPa')% Check for SSD CS structure
        sample_row_index = 4; % Example: Use 4th row (RC - Recycled Concrete Aggregate)
        if sample_row_index <= length(experimental_data.sample_descriptions)
           exp_xi_vals_cs = experimental_data.xi_marker_vals;
           exp_cs_vals = experimental_data.SSD.strength_MPa(sample_row_index, :);
           exp_cs_std_dev = experimental_data.SSD.strength_MPa_stddev(sample_row_index, :);
           valid_exp_idx = ~isnan(exp_cs_vals) & ~isnan(exp_cs_std_dev);
           exp_xi_vals_cs = exp_xi_vals_cs(valid_exp_idx);
           exp_cs_vals = exp_cs_vals(valid_exp_idx);
           exp_cs_std_dev = exp_cs_std_dev(valid_exp_idx);
           if ~isempty(exp_cs_vals)
               exp_strength_available = true;
               disp(['Experimental SSD compressive strength data found and processed for sample: ', experimental_data.sample_descriptions{sample_row_index}]);
           else
                disp(['No valid (non-NaN) experimental SSD strength data found for sample row: ', num2str(sample_row_index)]);
           end
        else
            disp(['Error: sample_row_index (', num2str(sample_row_index), ') is out of bounds for sample descriptions.']);
        end
    else
         disp('Experimental SSD compressive strength data structure not found or not loaded.');
    end


    % --- Create Figure and Plot ---
    % Only create figure if there's something to plot
    if can_plot_modeled_data || exp_strength_available
        f_strength = figure; % Create a new figure handle
        hold on;

        % 1) Plot Modeled Data (if available)
        if can_plot_modeled_data
            plot(xi_plot_cs, strength_plot, '-', 'LineWidth', 2, 'Color', 'b', ... % Line ~595
                 'DisplayName', 'Modeled Strength');
        end

        % 2) Plot Experimental Data (if available)
        if exp_strength_available
            errorbar(exp_xi_vals_cs, exp_cs_vals, exp_cs_std_dev, 's', ...
                     'Color', 'r', 'MarkerFaceColor', 'r', 'MarkerSize', 6, ...
                     'CapSize', 5, 'DisplayName', ['Experimental Data (RCA)']);
        end

        % --- Formatting ---
        grid on; box on;
        set(gca, 'FontSize', 12, 'LineWidth', 1);
        % ... (keep rest of formatting: fonts, axes, labels, limits, legend) ...
         set (0, "defaultaxesfontname", "Times New Roman")
         set (0, "defaultaxesfontsize", 12)
         set (0, "defaulttextfontname", "Times New Roman")
         set (0, "defaulttextfontsize", 12)
         ax = gca; % Get current axes
         ax.XMinorGrid = 'on'; ax.YMinorGrid = 'on';
         ax.XMinorTick = 'on'; ax.YMinorTick = 'on';
         ax.GridLineStyle = ':'; ax.MinorGridLineStyle = ':';
         ax.GridAlpha = 0.4; ax.MinorGridAlpha = 0.4;
         xlabel('Hydration Degree \xi [-]', 'FontSize', 12);
         ylabel('Compressive Strength {\it f_{c}} [MPa]', 'FontSize', 12, 'Interpreter', 'tex');
         xlim([0 1]);
         % Adjust Y limits based on available data
         maxYVal = 0;
         if can_plot_modeled_data && ~isempty(strength_plot)
             maxYVal = max(maxYVal, max(strength_plot));
         end
         if exp_strength_available && ~isempty(exp_cs_vals)
             maxYVal = max(maxYVal, max(exp_cs_vals + exp_cs_std_dev));
         end
         ylim([0 max(10, maxYVal * 1.1)]); % Use at least 10 or 110% of max value

         legend('Location', 'southeast', 'FontSize', 10);
         hold off;
         % Optional: Save the figure
         % format_fig(13,10)
         % print(f_strength,'Strength_vs_Hydration.pdf','-dpdf')
    else
        disp('Neither modeled nor experimental strength data available for plotting.');
    end % End check if can_plot_modeled_data or exp_strength_available

else
    disp('choose_Eonly was set to 1, skipping strength plot.');
end % End if choose_Eonly == 0

%% 9b) PLOT PER-LAYER COMPRESSIVE STRENGTH VS. HYDRATION DEGREE
if choose_Eonly == 0
    figure;
    layers = {'Sand','ITZ Layer 1','ITZ Layer 2','ITZ Layer 3','Matrix'};  
    xi_plot = [0, req_xi];                                                
    strength_mat = [zeros(1,5); compressive_strength];                     

    hold on;
    for i = 1:5
        plot(xi_plot, strength_mat(:,i), '-', 'LineWidth',1.5, ...
             'DisplayName', layers{i});
    end

    % --- Formatting ---
    grid on; box on;
    set(gca, 'FontSize', 12, 'LineWidth', 1);
    set(0, "defaultaxesfontname", "Times New Roman");
    set(0, "defaultaxesfontsize", 12);
    set(0, "defaulttextfontname", "Times New Roman");
    set(0, "defaulttextfontsize", 12);
    ax = gca;
    ax.XMinorGrid = 'on';  ax.YMinorGrid = 'on';
    ax.XMinorTick = 'on';  ax.YMinorTick = 'on';
    ax.GridLineStyle = ':';        ax.MinorGridLineStyle = ':';
    ax.GridAlpha = 0.4;            ax.MinorGridAlpha = 0.4;

    xlabel('Hydration Degree \xi [-]', 'FontSize', 12);
    ylabel('Compressive Strength {\it f_{c}} [MPa]', ...
           'FontSize', 12, 'Interpreter', 'tex');

    xlim([0 1]);
    % Auto-scale Y based on data, with minimum of 10 MPa
    maxYVal = max(strength_mat(:));
    ylim([0 max(10, maxYVal * 1.1)]);

    legend('Location', 'northwest', 'FontSize', 10);
    hold off;

    % Save as PDF
    saveas(gcf, 'PerLayer_Strength_vs_Hydration.pdf');
end
